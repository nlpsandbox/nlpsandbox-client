"""
    NLP Sandbox API

    NLP Sandbox REST API  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: team@nlpsandbox.io
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from nlpsandbox.api_client import ApiClient, Endpoint as _Endpoint
from nlpsandbox.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from nlpsandbox.model.annotation import Annotation
from nlpsandbox.model.annotation_create_request import AnnotationCreateRequest
from nlpsandbox.model.annotation_create_response import AnnotationCreateResponse
from nlpsandbox.model.error import Error
from nlpsandbox.model.page_of_annotations import PageOfAnnotations


class AnnotationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_annotation_endpoint = _Endpoint(
            settings={
                'response_type': (AnnotationCreateResponse,),
                'auth': [],
                'endpoint_path': '/datasets/{datasetId}/annotationStores/{annotationStoreId}/annotations',
                'operation_id': 'create_annotation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'dataset_id',
                    'annotation_store_id',
                    'annotation_id',
                    'annotation_create_request',
                ],
                'required': [
                    'dataset_id',
                    'annotation_store_id',
                    'annotation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'dataset_id',
                    'annotation_store_id',
                    'annotation_id',
                ]
            },
            root_map={
                'validations': {
                    ('dataset_id',): {
                        'max_length': 60,
                        'min_length': 3,
                        'regex': {
                            'pattern': r'^[a-z0-9]+(?:-[a-z0-9]+)*$',  # noqa: E501
                        },
                    },
                    ('annotation_store_id',): {
                        'max_length': 60,
                        'min_length': 3,
                        'regex': {
                            'pattern': r'^[a-z0-9]+(?:-[a-z0-9]+)*$',  # noqa: E501
                        },
                    },
                    ('annotation_id',): {
                        'max_length': 60,
                        'min_length': 3,
                        'regex': {
                            'pattern': r'^[a-z0-9]+(?:-[a-z0-9]+)*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dataset_id':
                        (str,),
                    'annotation_store_id':
                        (str,),
                    'annotation_id':
                        (str,),
                    'annotation_create_request':
                        (AnnotationCreateRequest,),
                },
                'attribute_map': {
                    'dataset_id': 'datasetId',
                    'annotation_store_id': 'annotationStoreId',
                    'annotation_id': 'annotationId',
                },
                'location_map': {
                    'dataset_id': 'path',
                    'annotation_store_id': 'path',
                    'annotation_id': 'query',
                    'annotation_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_annotation_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/datasets/{datasetId}/annotationStores/{annotationStoreId}/annotations/{annotationId}',
                'operation_id': 'delete_annotation',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'dataset_id',
                    'annotation_store_id',
                    'annotation_id',
                ],
                'required': [
                    'dataset_id',
                    'annotation_store_id',
                    'annotation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'dataset_id',
                    'annotation_store_id',
                    'annotation_id',
                ]
            },
            root_map={
                'validations': {
                    ('dataset_id',): {
                        'max_length': 60,
                        'min_length': 3,
                        'regex': {
                            'pattern': r'^[a-z0-9]+(?:-[a-z0-9]+)*$',  # noqa: E501
                        },
                    },
                    ('annotation_store_id',): {
                        'max_length': 60,
                        'min_length': 3,
                        'regex': {
                            'pattern': r'^[a-z0-9]+(?:-[a-z0-9]+)*$',  # noqa: E501
                        },
                    },
                    ('annotation_id',): {
                        'max_length': 60,
                        'min_length': 3,
                        'regex': {
                            'pattern': r'^[a-z0-9]+(?:-[a-z0-9]+)*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dataset_id':
                        (str,),
                    'annotation_store_id':
                        (str,),
                    'annotation_id':
                        (str,),
                },
                'attribute_map': {
                    'dataset_id': 'datasetId',
                    'annotation_store_id': 'annotationStoreId',
                    'annotation_id': 'annotationId',
                },
                'location_map': {
                    'dataset_id': 'path',
                    'annotation_store_id': 'path',
                    'annotation_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_annotation_endpoint = _Endpoint(
            settings={
                'response_type': (Annotation,),
                'auth': [],
                'endpoint_path': '/datasets/{datasetId}/annotationStores/{annotationStoreId}/annotations/{annotationId}',
                'operation_id': 'get_annotation',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'dataset_id',
                    'annotation_store_id',
                    'annotation_id',
                ],
                'required': [
                    'dataset_id',
                    'annotation_store_id',
                    'annotation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'dataset_id',
                    'annotation_store_id',
                    'annotation_id',
                ]
            },
            root_map={
                'validations': {
                    ('dataset_id',): {
                        'max_length': 60,
                        'min_length': 3,
                        'regex': {
                            'pattern': r'^[a-z0-9]+(?:-[a-z0-9]+)*$',  # noqa: E501
                        },
                    },
                    ('annotation_store_id',): {
                        'max_length': 60,
                        'min_length': 3,
                        'regex': {
                            'pattern': r'^[a-z0-9]+(?:-[a-z0-9]+)*$',  # noqa: E501
                        },
                    },
                    ('annotation_id',): {
                        'max_length': 60,
                        'min_length': 3,
                        'regex': {
                            'pattern': r'^[a-z0-9]+(?:-[a-z0-9]+)*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dataset_id':
                        (str,),
                    'annotation_store_id':
                        (str,),
                    'annotation_id':
                        (str,),
                },
                'attribute_map': {
                    'dataset_id': 'datasetId',
                    'annotation_store_id': 'annotationStoreId',
                    'annotation_id': 'annotationId',
                },
                'location_map': {
                    'dataset_id': 'path',
                    'annotation_store_id': 'path',
                    'annotation_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_annotations_endpoint = _Endpoint(
            settings={
                'response_type': (PageOfAnnotations,),
                'auth': [],
                'endpoint_path': '/datasets/{datasetId}/annotationStores/{annotationStoreId}/annotations',
                'operation_id': 'list_annotations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'dataset_id',
                    'annotation_store_id',
                    'limit',
                    'offset',
                ],
                'required': [
                    'dataset_id',
                    'annotation_store_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'dataset_id',
                    'annotation_store_id',
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('dataset_id',): {
                        'max_length': 60,
                        'min_length': 3,
                        'regex': {
                            'pattern': r'^[a-z0-9]+(?:-[a-z0-9]+)*$',  # noqa: E501
                        },
                    },
                    ('annotation_store_id',): {
                        'max_length': 60,
                        'min_length': 3,
                        'regex': {
                            'pattern': r'^[a-z0-9]+(?:-[a-z0-9]+)*$',  # noqa: E501
                        },
                    },
                    ('limit',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 10,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dataset_id':
                        (str,),
                    'annotation_store_id':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'dataset_id': 'datasetId',
                    'annotation_store_id': 'annotationStoreId',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'dataset_id': 'path',
                    'annotation_store_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def create_annotation(
        self,
        dataset_id,
        annotation_store_id,
        annotation_id,
        **kwargs
    ):
        """Create an annotation  # noqa: E501

        Create an annotation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_annotation(dataset_id, annotation_store_id, annotation_id, async_req=True)
        >>> result = thread.get()

        Args:
            dataset_id (str): The ID of the dataset
            annotation_store_id (str): The ID of the annotation store
            annotation_id (str): The ID of the annotation that is being created

        Keyword Args:
            annotation_create_request (AnnotationCreateRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AnnotationCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['dataset_id'] = \
            dataset_id
        kwargs['annotation_store_id'] = \
            annotation_store_id
        kwargs['annotation_id'] = \
            annotation_id
        return self.create_annotation_endpoint.call_with_http_info(**kwargs)

    def delete_annotation(
        self,
        dataset_id,
        annotation_store_id,
        annotation_id,
        **kwargs
    ):
        """Delete an annotation  # noqa: E501

        Deletes the annotation specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_annotation(dataset_id, annotation_store_id, annotation_id, async_req=True)
        >>> result = thread.get()

        Args:
            dataset_id (str): The ID of the dataset
            annotation_store_id (str): The ID of the annotation store
            annotation_id (str): The ID of the annotation

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['dataset_id'] = \
            dataset_id
        kwargs['annotation_store_id'] = \
            annotation_store_id
        kwargs['annotation_id'] = \
            annotation_id
        return self.delete_annotation_endpoint.call_with_http_info(**kwargs)

    def get_annotation(
        self,
        dataset_id,
        annotation_store_id,
        annotation_id,
        **kwargs
    ):
        """Get an annotation  # noqa: E501

        Returns the annotation specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_annotation(dataset_id, annotation_store_id, annotation_id, async_req=True)
        >>> result = thread.get()

        Args:
            dataset_id (str): The ID of the dataset
            annotation_store_id (str): The ID of the annotation store
            annotation_id (str): The ID of the annotation

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Annotation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['dataset_id'] = \
            dataset_id
        kwargs['annotation_store_id'] = \
            annotation_store_id
        kwargs['annotation_id'] = \
            annotation_id
        return self.get_annotation_endpoint.call_with_http_info(**kwargs)

    def list_annotations(
        self,
        dataset_id,
        annotation_store_id,
        **kwargs
    ):
        """List the annotations in an annotation store  # noqa: E501

        Returns the annotations in an annotation store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_annotations(dataset_id, annotation_store_id, async_req=True)
        >>> result = thread.get()

        Args:
            dataset_id (str): The ID of the dataset
            annotation_store_id (str): The ID of the annotation store

        Keyword Args:
            limit (int): Maximum number of results returned. [optional] if omitted the server will use the default value of 10
            offset (int): Index of the first result that must be returned. [optional] if omitted the server will use the default value of 0
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PageOfAnnotations
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['dataset_id'] = \
            dataset_id
        kwargs['annotation_store_id'] = \
            annotation_store_id
        return self.list_annotations_endpoint.call_with_http_info(**kwargs)

